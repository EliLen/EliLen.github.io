<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.EliLen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Elilen.github.io/"/>
  <updated>2019-06-17T14:44:55.698Z</updated>
  <id>https://Elilen.github.io/</id>
  
  <author>
    <name>EliLen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mimikatz神器</title>
    <link href="https://Elilen.github.io/2019/05/15/mimikatz/"/>
    <id>https://Elilen.github.io/2019/05/15/mimikatz/</id>
    <published>2019-05-15T06:45:57.000Z</published>
    <updated>2019-06-17T14:44:55.698Z</updated>
    
    <content type="html"><![CDATA[<font size="4">windows密码抓取神器</font><a id="more"></a><h4 id="win密码抓取"><a href="#win密码抓取" class="headerlink" title="win密码抓取"></a>win密码抓取</h4><p><strong>方法一：</strong></p><ol><li><p>运行主程序：<em>mimikatz.exe</em></p></li><li><p>输入：<em>privilege::debug</em>      提升权限</p></li><li><p>输入：inject::process lsass.exe sekurlsa.dll    将sekurlsa.dll 注入到lsass.exe 中（运行到这一步会出现拒绝访问的提示）</p></li><li><p>输入：<em>@getLogonPasswords</em>    即可获取<em>hash</em>和当前用户的明文密码！</p></li></ol><p>原理就是登陆的时候输入的密码，经过 <em>lsass.exe</em> 里的<em>wdigest</em>和<em>tspkg</em>两个模块调用后，它们对之进行加密处理，而没有进行擦除，而且该加密通过特征可以定位，并且按照微软的算法可逆。 只要登陆过，就可以抓出来，它进行枚举的。简单地说，在 <em>Windows</em> 中，当用户登录时，<em>lsass.exe</em> 使用一个可逆的算法，加密过的明文密码，并且把密文保存在内存中，没有清理，然后可以抓出来，还原。 也就是说，开机以后，只要是登陆过的用户，在没重启前（因为重启内存就清零了，这里不包括使用其他方法清理内存），都可以抓出来，注销也是无用的</p><p><strong>方法二（直接调用</strong>sekurlsa模块）</p><ol><li><p>运行主程序：mimikatz.exe</p></li><li><p>输入：privilege::debug      提升权限</p></li><li>输入：sekurlsa::logonPasswords full</li></ol><h4 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a><strong>工具使用</strong></h4><p><strong>cmd执行    mimikatz</strong></p><ol><li><p>常规的操作使用命令</p><p>mimikatz # cls –&gt;清屏,类似<a href="https://www.2cto.com/os/dos/" target="_blank" rel="noopener">dos</a>命令cls.</p><p>mimikatz # exit –&gt;退出mimikatz.</p><p>mimikatz #version –&gt;查看当前的mimikatz的版本.</p><p>随便输入”xxx::”，会提示error,可看到所有模块。</p></li></ol><p><img src="img/5/15/clipboard.png" alt="img"></p><p>查看列表中模块的具体参数同样可以输入”模块::”来查看，比如:”inject::”,如图：</p><p>可以看到模块inject的具体参数有pid,process,service等……</p><p><img src="img/5/15/clipboard1.png" alt="img"></p><ol start="2"><li><p>系统方面的操作使用命令:system</p><p>mimikatz #system::user –&gt;查看当前登录的系统用户</p><p>mimikazt #system::computer –&gt;返回当前的计算机名称</p></li><li><p>在服务器终端的操作命令: ts</p><p>ts::sessions –&gt;显示当前的会话</p><p>ts::processes –&gt;显示服务器的进程和对应的pid情况等。</p></li><li><p>系统服务相关的操作使用命令:service</p><p><em>service::list</em>    –&gt;列出系统的服务</p><p><em>service::remove</em>    –&gt;移除系统的服务</p><p><em>service::start stop</em> 服务名称    –&gt;启动或停止服务</p></li><li><p>系统进程相关操作的使用命令:process</p><p><em>process::list</em>    –&gt;列出进程</p><p><em>process::suspend</em> 进程名称    –&gt;暂停进程</p><p><em>process::stop</em> 进程名称    –&gt;结束进程</p><p><em>process::modules</em>    –&gt;列出系统的核心模块及所在位置</p></li><li><p>系统权限相关操作使用命令:<em>privilege</em></p><p><em>privilege::list</em>    –&gt;列出权限列表</p><p><em>privilege::enable</em>    –&gt;激活一个或多个权限</p><p><em>privilege::debug</em>    –&gt;提升权限</p></li><li><p>打开系统文件：<em>nogpo</em></p><p><em>nogpo::cmd</em>    –&gt;打开系统的<em>cmd.exe</em></p><p><em>nogpo::regedit</em>    –&gt;打开系统的注册表</p><p><em>nogpo::taskmgr</em>    –&gt;打开任务管理器</p></li><li><p>获取系统用户信息：sekurlsa</p><p><em>sekurlsa::wdigest</em>    –&gt;获取本地用户信息及密码（win2008后无用）</p><p><em>sekurlsa::tspkg</em>   –&gt;获取<em>tspkg</em>用户信息及密码</p><p><em>sekurlsa::logonPasswords</em>   –&gt;获登陆用户信息及密码</p></li><li><p>系统线程相关操作使用命令:thread</p></li><li><p>系统句柄相关操作使用命令:handle</p></li><li><p>加密相关操作使用命令:crypto</p></li><li><p>注入操作使用命令:inject</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;windows密码抓取神器&lt;/font&gt;
    
    </summary>
    
      <category term="Study" scheme="https://Elilen.github.io/categories/Study/"/>
    
      <category term="Tools" scheme="https://Elilen.github.io/categories/Study/Tools/"/>
    
    
      <category term="tools" scheme="https://Elilen.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Firewall-Cmd笔记</title>
    <link href="https://Elilen.github.io/2019/05/08/Firewall-cmd/"/>
    <id>https://Elilen.github.io/2019/05/08/Firewall-cmd/</id>
    <published>2019-05-08T07:56:57.000Z</published>
    <updated>2019-06-18T05:31:28.312Z</updated>
    
    <content type="html"><![CDATA[<font size="4">Linux防火墙管理工具</font><a id="more"></a><p><br></p><ul><li><p>启动firewalld服务</p><p>systemctl start firewalld.service</p></li><li><p>设置开机自启</p><p>systemctl enable firewalld.service</p></li><li><p>查看firewalld服务状态</p><p>firewall-cmd –state</p><p>systemctl status firewalld </p></li><li><p>重新加载firewalld配置</p><p>firewall-cmd –reload</p></li></ul><p><br></p><ul><li><p>设置默认区域</p><p>firewall-cmd –get-zones （查看可选区域）</p><p>firewall-cmd –get-default-zone  （查询默认区域）</p><p>firewall-cmd –set-default-zone=public   （设置默认区域为public）</p><p>firewall-cmd –get-default-zone</p></li></ul><p><br></p><ul><li><p>查看public区域的详细配置</p><p>firewall-cmd –zone=public –list-all</p></li></ul><p><br></p><ul><li><p>将server的网卡添加到public区域</p><p>firewall-cmd –zone=public –add-interface=eno16777736</p></li></ul><p><br></p><ul><li><p>–permanent 保存到配置文件中（永久有效）</p></li><li><p>将http服务添加到internal区域中 （允许内网访问http服务）</p><p>firewall-cmd –zone=internal –add-service=http –permanen</p></li><li><p>将http服务添加到public区域中 （允许外网访问http服务）</p><p>firewall-cmd –zone=public –add-service=http –permanent </p></li><li><p>允许外网访问FTP</p><p>firewall-cmd –zone=public –add-service=ftp –permanent</p><p>firewall-cmd –zone-public –add-service=ftp –pemanent</p></li><li><p>删除指定区域SSH服务（禁止外网访问SSH）</p><p>firewall-cmd –zone=public –remove-service=ssh –permanent</p></li><li><p>不允许ping测试（拒绝外网ping回复）</p><p>firewall-cmd –zone=public –list-icmp-blocks （查看）</p><p>firewall-cmd –zone=public –add-icmp-block=echo-request –permanent</p></li><li><p>重载防火墙</p><p>firewall-cmd –reload</p></li></ul><p><br></p><p><br></p><p><strong>// 配置SNAT转发</strong></p><ul><li><p>将连接外网的网卡连接到外网区域</p><p>firewall-cmd –zone=external –change-interface=eno16777736 –permanent</p></li><li><p>将连接内网的网卡连接到内网区域</p><p>firewall-cmd –zone=internal –change-interface=eno33554984 –permanent</p></li><li><p>查看external区域的详细配置</p><p>firewall-cmd –zone=external –list-all （查看masquerade：yes）</p></li></ul><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;Linux防火墙管理工具&lt;/font&gt;
    
    </summary>
    
      <category term="Study" scheme="https://Elilen.github.io/categories/Study/"/>
    
      <category term="Linux学习笔记" scheme="https://Elilen.github.io/categories/Study/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://Elilen.github.io/tags/Linux/"/>
    
      <category term="学习笔记" scheme="https://Elilen.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Firewall-cmd" scheme="https://Elilen.github.io/tags/Firewall-cmd/"/>
    
  </entry>
  
  <entry>
    <title>Apache笔记</title>
    <link href="https://Elilen.github.io/2019/05/05/Apache/"/>
    <id>https://Elilen.github.io/2019/05/05/Apache/</id>
    <published>2019-05-05T07:56:57.000Z</published>
    <updated>2019-06-18T05:32:10.238Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4">Web 站点建立<font><br><a id="more"></a></font></font></p><p><br></p><h4 id="主机名区分站点"><a href="#主机名区分站点" class="headerlink" title="主机名区分站点"></a><strong>主机名区分站点</strong></h4><ul><li><p>修改dns指定的配置文件</p><p>vim /var/named/scitc.zx</p><p>——&gt;&gt;&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newsINCNAMEwww</span><br><span class="line">​oaINCNAMEwww</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>创建主配置文件    </p><p>—conf.d是用户自己的配置文件，可以根据http.conf文件改—</p><p>cd /etc/httpd/conf.d</p><p>mkdir <a href="http://www.conf" target="_blank" rel="noopener">www.conf</a></p><p>vim <a href="http://www.conf" target="_blank" rel="noopener">www.conf</a>        —创建并修改主配置文件—</p><p>——&gt;&gt;&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;---注意格式---</span><br><span class="line"></span><br><span class="line">​ServerName www.scitc.com.cn:80---网站的域名---</span><br><span class="line"></span><br><span class="line">​DocumentRoot &quot;/web/scitc/www&quot;---主配置文件指定的目录---</span><br><span class="line"></span><br><span class="line">​&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">​&lt;Directory &quot;/web/scitc/www&quot;&gt;---主配置文件指定的目录---</span><br><span class="line"></span><br><span class="line">​Require all granted</span><br><span class="line"></span><br><span class="line">​&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建主配置文件指定的目录</p><p>mkdir -p /web/scitc/www            (-p 是创建子目录)</p><p>cd /web/scitc/www</p><p>echo “This is www”  &gt;  index.html</p></li><li><p>设置/web/scitc/www的安全上下文</p><p>ls -Z /web/scitc/www        —查看安全上下文—</p><p>semanage fcontext -a -t httpd_sys_content_t “/web(/.*)?”</p><p>restorecon -vRF /web        —重新加载安全上下文—    -v显示详细过程</p></li><li><p>重启Apache服务</p><p>systemctl restart httpd.service    —353安全上下文有错—</p><p>Firefox    –测试–</p></li></ul><p><br></p><h4 id="端口区分站点"><a href="#端口区分站点" class="headerlink" title="端口区分站点"></a><strong>端口区分站点</strong></h4><ul><li><p>创建主配置文件    </p><p>—conf.d是用户自己的配置文件，可以根据http.conf文件改—</p><p>cd /etc/httpd/conf.d</p><p>mkdir www10080.conf</p><p>vi www10080.conf</p><p>——-&gt;&gt;&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Listen 10080</span><br><span class="line"></span><br><span class="line">​&lt;VirtualHost *:10080&gt;---注意格式---</span><br><span class="line"></span><br><span class="line">​ServerName www.scitc.com.cn:10080---网站的域名---</span><br><span class="line"></span><br><span class="line">​DocumentRoot &quot;/web/scitc/www10080&quot;  ---主配置文件指定的目录---</span><br><span class="line"></span><br><span class="line">​&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">​&lt;Directory &quot;/web/scitc/www10080&quot;&gt;  ---主配置文件指定的目录---</span><br><span class="line"></span><br><span class="line">​Require all granted</span><br><span class="line"></span><br><span class="line">​&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建指定的新的子目录</p><p>mkdir /web/scitc/www10080</p></li><li><p>写入一个新网页</p><p>echo “www10080 www10080 www10080” &gt; index.html</p></li><li><p>允许端口通过防火墙</p><p>firewall-cmd –add-port=10080/tcp –permanent</p><p>firewall-cmd –reload</p></li><li><p>修改端口安全上下文</p><p>semanage port -l | grep http        —查看默认的安全上下文配置—</p><p>semanage port -a -t http_port_t -p tcp 10080</p></li><li><p>重新加载Apache服务</p><p>systemctl restart httpd.service</p></li><li><p>测试</p><p>curl <a href="http://www.scitc.com.cn:10080" target="_blank" rel="noopener">www.scitc.com.cn:10080</a></p><p><br></p></li></ul><h4 id="虚拟目录区分站点"><a href="#虚拟目录区分站点" class="headerlink" title="虚拟目录区分站点"></a><strong>虚拟目录区分站点</strong></h4><ul><li><p>创建一个虚拟目录</p><p>mkdir /web/scitc/www/123</p><p>echo “5555555555” &gt; /web/scitc/www/123/index.html</p></li><li><p>修改主配置文件</p><p>——-&gt;&gt;&gt;&gt;添加如下几行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;/web/scitc/www/123&quot;&gt;</span><br><span class="line"></span><br><span class="line">​     Require all granted</span><br><span class="line"></span><br><span class="line">​&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><p><br></p><p><br></p><p><br></p><h4 id="所有代码"><a href="#所有代码" class="headerlink" title="所有代码"></a>所有代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/httpd/conf.d</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line"></span><br><span class="line">vim www.conf</span><br><span class="line"></span><br><span class="line">cp www.conf news.conf</span><br><span class="line"></span><br><span class="line">cp www.conf sports.conf</span><br><span class="line"></span><br><span class="line">vim news.conf </span><br><span class="line"></span><br><span class="line">vim sports.conf </span><br><span class="line"></span><br><span class="line">mkdir -p /srv/www/www</span><br><span class="line"></span><br><span class="line">cd /srv/www</span><br><span class="line"></span><br><span class="line">mkdir news sports</span><br><span class="line"></span><br><span class="line">cd www</span><br><span class="line"></span><br><span class="line">echo &quot;wwwwwwwwwwwwwwwwwwww&quot; &gt; index.html</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">cd news/</span><br><span class="line"></span><br><span class="line">echo &quot;newsssssssssssssssssssss&quot; &gt; index.html</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">cd sports/</span><br><span class="line"></span><br><span class="line">echo &quot;sportstttttttttttttttt&quot; &gt; index.html</span><br><span class="line"></span><br><span class="line">ls -Z /var/www/html</span><br><span class="line"></span><br><span class="line">cd</span><br><span class="line"></span><br><span class="line">semanage fcontext -a -t httpd_sys_content_t &apos;/srv(/.*)?&apos;</span><br><span class="line"></span><br><span class="line">restorecon -vRF /srv</span><br><span class="line"></span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cp news.conf news10080.conf</span><br><span class="line"></span><br><span class="line">vim news10080.conf </span><br><span class="line"></span><br><span class="line">mkdir /web/scitc/news10080</span><br><span class="line"></span><br><span class="line">cd /web/scitc/news10080</span><br><span class="line"></span><br><span class="line">echo &quot;1008010080100801008010080100801008010080&quot; &gt; index.html</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=10080/tcp --permanent </span><br><span class="line"></span><br><span class="line">firewall-cmd --reload </span><br><span class="line"></span><br><span class="line">semanage port -l | grep http</span><br><span class="line"></span><br><span class="line">semanage port -a -t http_port_t -p tcp 10080</span><br><span class="line"></span><br><span class="line">semanage port -l | grep http</span><br><span class="line"></span><br><span class="line">cd news10080/</span><br><span class="line"></span><br><span class="line">ls -Z index.html </span><br><span class="line"></span><br><span class="line">systemctl restart httpd.service</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font size=&quot;4&quot;&gt;Web 站点建立&lt;font&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Study" scheme="https://Elilen.github.io/categories/Study/"/>
    
      <category term="Linux学习笔记" scheme="https://Elilen.github.io/categories/Study/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://Elilen.github.io/tags/Linux/"/>
    
      <category term="学习笔记" scheme="https://Elilen.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Apache" scheme="https://Elilen.github.io/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Yum源笔记</title>
    <link href="https://Elilen.github.io/2019/05/02/yum/"/>
    <id>https://Elilen.github.io/2019/05/02/yum/</id>
    <published>2019-05-02T07:56:57.000Z</published>
    <updated>2019-06-18T05:37:49.565Z</updated>
    
    <content type="html"><![CDATA[<font size="4">yum源的挂载和使用</font><a id="more"></a><p><br></p><h4 id="yum源挂载"><a href="#yum源挂载" class="headerlink" title="yum源挂载"></a>yum源挂载</h4><ul><li><p>创建，修改</p><p>mkdir /mnt/cdrom    创建挂载点</p><p>mount /dev/cdrom /mnt/cdrom</p><p>cd /mnt/cdrom</p><p>yum-config-manager –add-repo=file:///mnt/cdrom</p><p>cd /etc/yum.repos.d/</p></li><li><p>vim mnt_cdrom.repo</p><p>—–&gt;&gt;&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​gpgcheck=0</span><br></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><p>永久挂载    —光盘格式  iso9660—</p><p>vim /etc/fstab   </p><p> —–&gt;&gt;&gt;  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/cdrom /mnt/cdrom iso9660 defaults 0 0</span><br></pre></td></tr></table></figure></li></ul><p><img src="C:/Users/Eli_Lennon/AppData/Local/YNote/data/1395180076@qq.com/ded5e0c433954b45a4da85a48111a147/clipboard.png" alt="img"></p><ul><li><p>mount -a</p><p>mount -a     将/etc/fstab的所有内容重新加载</p><p>mount         是可以显示/etc/fstab的内容。 </p></li></ul><p><br></p><p><br></p><h4 id="查看仓库"><a href="#查看仓库" class="headerlink" title="查看仓库"></a>查看仓库</h4><ul><li>yum list</li></ul><p><br></p><p><br></p><h4 id="搜索-安装-卸载-软件"><a href="#搜索-安装-卸载-软件" class="headerlink" title="搜索/安装/卸载  软件"></a>搜索/安装/卸载  软件</h4><ul><li>yum search ftp</li><li>yum install ftp.x86_64 -y</li><li>yum remove ftp.x86_64 -y </li></ul><p><br></p>]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;yum源的挂载和使用&lt;/font&gt;
    
    </summary>
    
      <category term="Study" scheme="https://Elilen.github.io/categories/Study/"/>
    
      <category term="Linux学习笔记" scheme="https://Elilen.github.io/categories/Study/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://Elilen.github.io/tags/Linux/"/>
    
      <category term="学习笔记" scheme="https://Elilen.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Yum源" scheme="https://Elilen.github.io/tags/Yum%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Namp</title>
    <link href="https://Elilen.github.io/2019/04/29/Nmap/"/>
    <id>https://Elilen.github.io/2019/04/29/Nmap/</id>
    <published>2019-04-29T06:01:57.000Z</published>
    <updated>2019-06-18T00:30:33.999Z</updated>
    
    <content type="html"><![CDATA[<font size="4">简单的namp使用手册</font><a id="more"></a><h2 id="Nmap全面扫描"><a href="#Nmap全面扫描" class="headerlink" title="Nmap全面扫描"></a><strong>Nmap全面扫描</strong></h2><ul><li>单个主机</li></ul><p>nmap 192.168.10.10 （等同于全开）</p><ul><li>多个主机</li></ul><p>nmap 192.168.10.11,20,110</p><p>nmap 192.168.10.10,172.168.10.11</p><p>nmap 192.168.10.1-254</p><p>nmap 192.168.10.1/24  (整个子网)</p><ul><li>扫描文件里的IP</li></ul><p>nmap -iL ip.txt</p><ul><li>排除IP</li></ul><p>nmap 192.168.10.1-254 –exclude 192.168.10.5-11</p><ul><li>排除文件中的IP</li></ul><p>nmap 192.168.10.1-254 –exclude exip.txt</p><ul><li>随机找几个IP进行扫描</li></ul><p>nmap -iR 10 -p22</p><ul><li>Nmap -T4 -A -v ip</li></ul><p>-T4: 指定扫描时使用的时序(1-6，越大越快)</p><p>-A：使用进攻性方式扫描</p><p>-v：显示侦测时的详细信息</p><p><br></p><h2 id="Nmap主机发现"><a href="#Nmap主机发现" class="headerlink" title="Nmap主机发现"></a><strong>Nmap主机发现</strong></h2><p>-sL：只列举IP，不进行主机发现（list scan）</p><p>-sn：只进行主机发现，不进行端口扫描（探测存活主机）（ping scan）</p><p>-Pn：跳过主机发现，直接扫描端口（不判断主机是否在线）</p><p>-sP：仅使用Ping协议（主机数量大）</p><p>-n：不用DNS解析，加快扫描速度</p><p>-R：总是进行DNS解析</p><p>–dns-servers &lt;serv1[,serv2],…&gt;: 指定DNS服务器。   </p><p>–system-dns: 指定使用系统的DNS服务器   </p><p>–traceroute: 追踪每个路由节点 </p><p><br></p><h2 id="Nmap端口发现"><a href="#Nmap端口发现" class="headerlink" title="Nmap端口发现"></a><strong>Nmap端口发现</strong></h2><p><strong>–默认扫描常见的1000个端口–</strong></p><p>–端口状态–</p><p>open：开放</p><p>Closed：关闭</p><p>Filtered：被防火墙屏蔽，无法确定状态</p><p>Unfiltered：未被防火墙屏蔽，但仍无法确定状态</p><p>Open|fiktered：开放或者是屏蔽</p><p>Closed|filtered：关闭或者是屏蔽</p><p><strong>主机端口扫描方式：</strong></p><ul><li>扫描ARP协议（和目标主机处于同一网段时）</li></ul><p>nmap -PR 192.168.10.11</p><ul><li>扫描TCP协议（对目标主机进行扫描）</li></ul><p>nmap -sS 192.168.10.11   –半开(TCP SYN)扫描 不建立第三次会话（速度快，更安全）–</p><p>nmap -sT 192.168.10.11   –全开(TCP Connect())扫描 –</p><p>nmap -sA 192.168.10.11   –发送TCP的ACK包，可扫是否存活–</p><p>–利用ACK扫描判断端口是否被过滤。针对ACK探测包，未被过滤的端口（无论打开、关闭）会回复RST包。–</p><p>nmap -sW 192.168.10.11  TCP –windows扫描–</p><p>—Window扫描方式只对某些TCPIP协议栈才有效。window扫描原理与ACK类似，发送ACK包探测目标端口，对回复的RST包中的Window size进行解析。在某些TCPIP协议栈实现中，关闭的端口在RST中会将Window size设置为0；而开放的端口将Window size设置成非0的值。—</p><ul><li>秘密扫描方式来协助探测对方的TCP端口状态</li></ul><p>nmap -sN 192.168.10.11   –TCP Null 扫描–</p><p>nmap -sF 192.168.10.11   –发送FIN标志的数据包–</p><p>—可以利用FIN扫描方式探测防火墙状态。FIN扫描方式用于识别端口是否关闭，收到RST回复说明该端口关闭，否则说明是open或filtered状态。—</p><ul><li>扫描UDP协议（不常用，费时，不方便）</li></ul><p>nmap -sU 192.168.10.11</p><p><strong>主机端口参数：</strong></p><ul><li>快速模式，仅扫描TOP 100的端口(-F：Fast mode)</li></ul><p>nmap -F 192.168.10.11</p><ul><li>全部端口</li></ul><p>nmap -p “*” 192.168.10.11</p><ul><li>指定端口(可连续)</li></ul><p>nmap -p20-25,443,3306 192.168.10.11</p><ul><li>前n个端口</li></ul><p>nmap –top-ports 10 192.168.10.11</p><ul><li>扫描指定频率以上的端口</li></ul><p>nmap –port-ratio（0-1之间） 192.168.10.11</p><p><br></p><h2 id="Nmap高级选项"><a href="#Nmap高级选项" class="headerlink" title="Nmap高级选项"></a><strong>Nmap高级选项</strong></h2><ul><li>查看本地路由与接口（网络接口信息）-e &lt;interface&gt;</li></ul><p>nmap -iflist</p><ul><li>指定网口与IP地址</li></ul><p>nmap -e eth0 192.168.10.10</p><ul><li>扫描路由器TFTP</li></ul><p>nmap –sU –p69 –nvv target</p><p>—大多数路由器都支持TFTP协议(简单文件传输协议)，该协议常用于备份和恢复路由器的配置文件，运行在UDP 69端口上。使用上述命令可以探测出路由器是否开放TFTP。—</p><ul><li>扫描思科路由器</li></ul><p>nmap -p1-25,80,512-515,2001,4001,6001,9001 10.20.0.1/16</p><p>—思科路由器会在上述端口中运行了常见的服务。列举出上述端口开放的主机，可以定位到路由器设备可能的IP地址及端口状态。—</p><p><strong>Nmap OS识别</strong></p><ul><li>nmap -O 192.168.10.11</li></ul><p><strong>Nmap服务版本识别</strong></p><ul><li>nmap -sV 192.168.10.11</li></ul><p><strong>Nmap输出</strong></p><ul><li>扫描结果保存为XML文件</li></ul><p>nmap -oX Report.xml 192.168.10.11</p><ul><li>只输出open的端口</li></ul><p>nmap –open 192.168.10.11</p><p><br></p><h2 id="Nmap脚本扫描"><a href="#Nmap脚本扫描" class="headerlink" title="Nmap脚本扫描"></a><strong>Nmap脚本扫描</strong></h2><p><strong>Nmap提供的命令行参数：：</strong></p><p>-sC： 等价–script=default，使用默认类别的脚本进行扫描</p><p>–script=&lt;Lua scripts&gt;:&lt;Lua scripts&gt; 使用某个和某类脚本扫描，支持通配符</p><p>–script-args=&lt;n1=v1,[n2=v2,..]&gt; 为脚本提供默认参数</p><p>–script-args-file=filename 使用文件夹为脚本提供参数</p><p>–script-tarce 显示脚本执行过程中发送与接收的数据</p><p>–script-updatedb：更新脚本数据库</p><p>–script-help=&lt;scripts &gt;显示脚本的帮助信息，其中&lt;scripts&gt;可以用逗号分隔</p><p><br></p><p><strong>nmap脚本的分类</strong></p><p>在调用nmap脚本之前，我们可以先进入<strong>script</strong>目录，用<strong>tab</strong>键自动填充来查看有哪些脚本可用</p><p><code>ls /usr/share/nmap/script/mysql-    //双击tab</code></p><ul><li>扫描时根据需要设置 –script=类别 ：</li></ul><p>auth: 负责处理鉴权证书（绕开鉴权）的脚本</p><p>broadcast: 在局域网内探查更多服务开启状况，如dhcp/dns/sqlserver等服务</p><p>brute: 提供暴力破解方式，针对常见的应用如http/snmp等</p><p>default: 使用-sC或-A选项扫描时候默认的脚本，提供基本脚本扫描能力</p><p>discovery: 对网络进行更多的信息，如SMB枚举、SNMP查询等</p><p>dos: 用于进行拒绝服务攻击</p><p>exploit: 利用已知的漏洞入侵系统</p><p>external: 利用第三方的数据库或资源，例如进行whois解析</p><p>fuzzer: 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 </p><p>intrusive: 入侵性的脚本，此类脚本可能引发对方的IDS/IPS的记录或屏蔽</p><p>safe: 此类与intrusive相反，属于安全性脚本</p><p>malware: 探测目标机是否感染了病毒、开启了后门等信息</p><p>version: 负责增强服务与版本扫描（Version Detection）功能的脚本</p><p>vuln: 负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067</p><p><br></p><p><strong>0x01 nmap按脚本分类扫描</strong></p><ul><li>负责处理鉴权证书（绕开鉴权）的脚本,也可以作为检测部分应用弱口令</li></ul><p>nmap –script=auth 192.168.10.10</p><ul><li>提供暴力破解的方式，可对数据库，smb，snmp等进行简单的暴力猜解</li></ul><p>nmap –script=brute 192.168.10.10</p><ul><li>默认脚本扫描，主要收集各种应用服务的信息，收集后，在针对具体服务进行攻击</li></ul><p>nmap –script=default 192.168.137.<em> 或者 nmap -sC 192.168.137.</em></p><ul><li>检查是否存在常见漏洞</li></ul><p>nmap –script=vuln 192.168.10.10</p><ul><li>在局域网探查更多服务开启状况</li></ul><p>nmap -n -p445 –script=broadcast 192.168.10.10</p><ul><li>利用第三方的数据库或资源，例如进行whois解析</li></ul><p>nmap –script=external 202.103.243.110</p><p><br></p><p><strong>0x02 nmap按应用服务扫描</strong></p><p><strong>（1）vnc扫描</strong></p><ul><li>检查vnc bypass</li></ul><p>nmap –script=realvnc-auth-bypass 192.168.10.10</p><ul><li>检查vnc认证方式</li></ul><p>nmap –script=vnc-auth 192.168.10.10</p><ul><li>获取vnc信息</li></ul><p>nmap –script=vnc-info 192.168.10.10</p><p><strong>（2）smb扫描</strong></p><ul><li>smb破解</li></ul><p>nmap –script=smb-brute.nse 192.168.10.10</p><ul><li>smb字典破解</li></ul><p>nmap –script=smb-brute.nse –script-args=userdb=/var/passwd,passdb=/var/passwd IP</p><ul><li>已知几个严重漏洞</li></ul><p>nmap –script=smb-check-vulns.nse –script-args=unsafe=1 192.168.10.10</p><ul><li>查看共享目录</li></ul><p>nmap -p445 –script=smb-ls –script-args=share=e$,path=\,subuser=test,smbpass=test IP</p><ul><li>查询主机一些敏感信息（注：需下载nmap_service）</li></ul><p>nmap -p445 –script=smb-psexec –script-args=smbuser=test,smbpass=test IP</p><ul><li>查看会话</li></ul><p>nmap -p445 –script=smb-enum-sessions.nse –script-args=smbuser=test,smbpass=test IP</p><ul><li>系统信息</li></ul><p>nmap -n -p445 –script=smb-os-discovery.nse –script-args=smbuser=test,smbpass=test IP</p><p><strong>(3)Mssql扫描</strong></p><ul><li>猜解mssql用户名和密码</li></ul><p>nmap -p1433 –script=ms-sql-brute.nes –script-args=userdb=/var/user,passdb=/var/passwd IP</p><ul><li>xp_cmdshell执行命令</li></ul><p>nmap -p1433 –script=ms-sql-xp-cmdshell.nse –script-args=mssql.username=sa,mssql.password=sa，ms-sql-xp-cmdshell.cmd=”net user” 192.168.10.10</p><ul><li>dumphash值</li></ul><p>nmap -p1433 –script=ms-sql-dump-hashes.nse –script-srgs=mssql.username=sa,mssql.passwd=sa 192.168.10.10</p><p><strong>（4）Mysql扫描</strong></p><ul><li>扫描root空口令</li></ul><p>nmap -p3306 –script=mysql-empty-password.nse 192.168.10.10</p><ul><li>列出所用mysql用户</li></ul><p>nmap -p3306 –script=mysql-users.nse –script-args=mysqluser=root 192.168.10.10</p><ul><li>支持同一应用的所有脚本扫描</li></ul><p>nmap –script=mysql-* 192.168.10.10</p><p><strong>（5）Oracle扫描</strong></p><ul><li>oracle sid 扫描</li></ul><p>nmap -p1521-1560 –script=oracle-sid-brute.nse 192.168.10.10</p><ul><li>oracle弱口令破解</li></ul><p>nmap -p1521 –script=oracle-burte.nse –script-args=oracle-brute.sid=ORCL,userdb=/var/username,passdb=/var/passwd 192.168.10.10</p><p><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;简单的namp使用手册&lt;/font&gt;
    
    </summary>
    
      <category term="Study" scheme="https://Elilen.github.io/categories/Study/"/>
    
      <category term="Tools" scheme="https://Elilen.github.io/categories/Study/Tools/"/>
    
    
      <category term="nmap" scheme="https://Elilen.github.io/tags/nmap/"/>
    
      <category term="kali" scheme="https://Elilen.github.io/tags/kali/"/>
    
      <category term="Tools" scheme="https://Elilen.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Python编码</title>
    <link href="https://Elilen.github.io/2019/04/26/py-encode/"/>
    <id>https://Elilen.github.io/2019/04/26/py-encode/</id>
    <published>2019-04-26T04:01:57.000Z</published>
    <updated>2019-06-17T14:30:13.959Z</updated>
    
    <content type="html"><![CDATA[<font size="4">python中遇到的编码问题</font><a id="more"></a><p><strong>encode(编码):</strong></p><blockquote><p>按照某种规则将”文本”转换为”字节流”。python3中表示:unicode变成str</p></blockquote><p><strong>decode(解码):</strong></p><blockquote><p>按照某种规则将”字节流”转换成”文本”。python3中表示:str变成unicode</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(<span class="string">"nsbs"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;4&quot;&gt;python中遇到的编码问题&lt;/font&gt;
    
    </summary>
    
      <category term="Study" scheme="https://Elilen.github.io/categories/Study/"/>
    
      <category term="Python" scheme="https://Elilen.github.io/categories/Study/Python/"/>
    
    
      <category term="python编码" scheme="https://Elilen.github.io/tags/python%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Blog美化</title>
    <link href="https://Elilen.github.io/2019/04/26/Blog/"/>
    <id>https://Elilen.github.io/2019/04/26/Blog/</id>
    <published>2019-04-26T02:54:17.000Z</published>
    <updated>2019-06-17T14:56:43.443Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4">美化博客不归路<font><br><a id="more"></a></font></font></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>从想搭博客开始，已经过了将近一个月了，直到今天晚上才完成，真的是好心累啊。<br>各种崩盘各种难受，可能是我前端学的太菜了吧，我用了整整六天的时间，来完成这么一个大工程，最开始只是想好好的玩一下，结果。。。。。。。。哎，一言难尽啊，总结两点，第一不要想优化博客，第二请查看第一条。 ….手动哭….</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font size=&quot;4&quot;&gt;美化博客不归路&lt;font&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Life" scheme="https://Elilen.github.io/categories/Life/"/>
    
      <category term="daily" scheme="https://Elilen.github.io/categories/Life/daily/"/>
    
    
      <category term="hexo" scheme="https://Elilen.github.io/tags/hexo/"/>
    
      <category term="随笔" scheme="https://Elilen.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>随笔图</title>
    <link href="https://Elilen.github.io/2019/04/25/img/"/>
    <id>https://Elilen.github.io/2019/04/25/img/</id>
    <published>2019-04-25T10:52:17.000Z</published>
    <updated>2019-06-18T00:27:19.898Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4">随笔分享一波图<font></font></font></p><a id="more"></a><fancybox><br><br><img src="http://pqpcdg3eo.bkt.clouddn.com/img/19.04.25/gfa.jpg?imageView2/2/w/900/h/1000/p/100!" alt><br><br><img src="http://pqpcdg3eo.bkt.clouddn.com/img/19.04.25/gfb.jpg?imageView2/2/w/900/h/1000/p/100!" alt><br><br><img src="http://pqpcdg3eo.bkt.clouddn.com/img/19.04.25/gfc.jpg?imageView2/2/w/900/h/1000/p/100!" alt><br></fancybox>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;font size=&quot;4&quot;&gt;随笔分享一波图&lt;font&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="https://Elilen.github.io/categories/Life/"/>
    
      <category term="daily" scheme="https://Elilen.github.io/categories/Life/daily/"/>
    
    
      <category term="img" scheme="https://Elilen.github.io/tags/img/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://Elilen.github.io/2019/04/18/hello-world/"/>
    <id>https://Elilen.github.io/2019/04/18/hello-world/</id>
    <published>2019-04-18T08:14:38.000Z</published>
    <updated>2019-05-10T12:00:22.737Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://Elilen.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
